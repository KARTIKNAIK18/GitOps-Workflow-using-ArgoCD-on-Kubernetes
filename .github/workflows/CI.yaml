name: CI-pipeline

on:
  push:
    branches:
        - main
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/CI.yaml'
  
jobs:
  cheackout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2



  codeql-analysis:
    runs-on: ubuntu-latest
    needs: cheackout
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Initialize CodeQL 
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-report.sarif
      
      - name: logs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: codeql-logs
          path: codeql-report.sarif 

    

  trivy-file-system-scan:
    runs-on: ubuntu-latest
    needs: cheackout
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Trivy Vulnerability Scan  
        uses: aquasecurity/trivy-action@master
        with:
            scan-type: fs
            format: table
            severity: CRITICAL
            output: trivy-report.sarif
            output-format: sarif
            ignore-unfixed: true
      - name: logs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-logs
          path: trivy-report.sarif



  docker-build:
    runs-on: ubuntu-latest
    needs: trivy-file-system-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Read the env 
        run: |
          echo "frontend-version=$(cat frontend/version.txt)" >> $GITHUB_ENV
          echo "backend-verion=$(cat backend/version.txt)" >> $GITHUB_ENV
        
      - name: env
        run: |
          echo "Version is ${{ env.frontend-version }}"
          echo "Version is ${{ env.backend-verion }}"


      - name: cheack the frontend image existence
        id: image-ex-frontend
        run: |
            if docker pull ${{secrets.DOCKER_HUB_USERNAME}}/note-app-frontend:${{ env.frontend-version}}; then
              echo "exits=true" >> $GITHUB_OUTPUT
            else
              echo "exits=false" >> $GITHUB_OUTPUT
            fi
      - name: cheack the backend image existence
        id: image-ex-backend
        run: |
            if docker pull ${{secrets.DOCKER_HUB_USERNAME}}/note-app-backend:${{ env.backend-verion}}; then
              echo "exits=true" >> $GITHUB_OUTPUT
            else
              echo "exits=false" >> $GITHUB_OUTPUT
            fi



      - name: forontend Build and push Docker image
        if: steps.image-ex-frontend.outputs.exits == 'false'
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/note-app-frontned:${{ env.frontend-version}}
        
      - name: backend Build and push Docker image
        if: steps.image-ex-backend.outputs.exits == 'false'
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/note-app-backend:${{ env.backend-verion}}  